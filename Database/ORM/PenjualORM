from sqlalchemy import Column, String, Integer, Date
import sys
sys.path.insert(0, 'd:/PBO/Kelompok 10/database')
import Data_Base
from database.Data_Base import Base, sessionFactory
import sys
sys.path.insert(0, 'd:/PBO/Kelompok 10/class')

class penjualOrm(Base):
    __tablename__ = 'penjual'

    kodePenjual = Column(String, unique=True)
    id = Column(Integer, primary_key=True)
    tanggal = Column(Date)

    def __init__(self, kodePenjualan, id, tanggal):
        self.__kodePenjualan = kode
        self.__id = id
        self.__tanggal = tanggal

    @staticmethod
    def showUser():
        try:
            session = sessionFactory()
            for user in session.query(PenjualOrm).all():
                print("kodePenjualan = {}, id = {}, tanggal = {}".format(penjual.kodePenjualan, user.id,
                                                                                          user.tanggal))
            session.close()
        except Exception as e:
            print("===>", e)

    def insertPenjual(self):
        try:
            session = sessionFactory()
            userOrm = penjualOrm(self.kodePenjualan, self.id, self.tanggal)
            session.add(penjualOrm)
            session.commit()
            session.close()
        except Exception as e:
            print("===>", e)
        else:
            print("Data Tersimpan!")

    @staticmethod
    def updatepenjualPass(idUser):
        try:
            newkodePenjualan= input("Masukkan kodePenjualn: ")
            newtanggal = input("masukkan tanggal: ")
            session = sessionFactory()
            session.query(penjualOrm).filter_by(id=id).update({
                penjualOrm.kodePenjualan: newkodePenjualan, penjualOrm.tanggal: newtanggal
            }, synchronize_session=False)
            session.commit()
            session.close()
        except Exception as e:
            print("===>", e)
        else:
            print("Data Terupdate!")

    @staticmethod
    def deletpenjual(username):
        try:
            session = sessionFactory()
            session.query(penjualOrm).filter_by(id=id).delete()
            session.commit()
            session.close()
        except Exception as e:
            print("===>", e)
        else:
            print("Data Terhapus!")

    @staticmethod
    def verifyUser(id) -> bool:
        try:
            session = sessionFactory()
            if ((session.query(penjualOrm).filter_by(id=id).count()) == 1):
                return True
            else:
                return False
            session.close()
        except Exception as e:
            print("===>", e)
